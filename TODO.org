* Features
** Misc
*** DONE s/belletrist/sykosomatic/
    It is time.
*** DONE Factor out db-related stuff from account.lisp into db.lisp
    Give it its own package, too.
*** TODO Move websocket stuff into its own file. (?)
** Accounts
*** DONE Account creation
**** DONE Use emails as logins, and replace usernames with 'display names'.
**** DONE Limit characters and number of characters allowed for usernames and passwords
**** DONE Prevent duplicate account creation.
*** TODO Allow changing passwords.
*** TODO Password recovery.
*** DONE Add display names for accounts.
*** TODO Write a function that will return all currently-chatting accounts.
** Storybuilding
   In general, players can hang around and play casually however they want. If/when they have an
   idea or want to play out something more seriously, they can choose to start a 'scene' to earn
   points.

   A scene will be recorded, and transcribed to look like a screenplay once it's done. It will then
   be posted in a community area, where others can rate the overall scene, as well as individual
   characters in it.

   Scene scores are divided amongst players, and individual achievement scores give individual
   players bonuses. Points are awarded based on score, and the points can be used towards something.
*** DONE Use display names instead of account names for the chat.
*** DONE Add basic character creation.
    Just a little box where users can enter a character name, which must be unique, and a brief
    description of the character.
*** TODO Use current character name instead of display name for chat.
    Make 'current character' the first character in the account's character array.
*** TODO Add a 'choose character' dropdown.
*** TODO Add either a drop down or a 'choose character' screen.
*** TODO Use account _id instead of account_name for characters
    This'll require figuring out how to do view collation so that searching can happen by account
    name, but the account name itself can stay on the account document.
*** TODO group actions and dialog by user.
*** TODO Use (CONT'D.) (?)
*** TODO OOC pane
    There should be an OOC pane on the side (or somewhere) where miscellaneous messages and player
    chatting can happen without interrupting the flow of the scene.
*** TODO Persistent scenes
    NOTE: This'll need to be done *after* characters are implemented.
    Players should be able to 'record' scenes, which will be saved as they see them. These scenes
    should be viewable in a separate page (for phase 1). Would be nice to also have them formatted
    as screenplays.
*** TODO Scene ratings
    Allow others to view and rate existing recorded scenes.
*** TODO More better input
    The current input method is cute, but not the intended one. A better input mechanism should be
    developed. Most likely, it should at least partly use the old MUD-style sentence parser, and
    decompose it into the necessary components. It's not important to get very fancy with this yet,
    though.
    While developing this, the fact that there will also be an OOC pane should be taken into
    consideration. Should there be multiple inputs?
    A full implementation of this will probably have to wait until there's full support for game
    objects and similar.
*** TODO Add concept of a 'location'
    Once characters exist, we can start adding the concept of a 'location' to the game. Locations
    should have a description, and should be able to 'contain' other characters. Characters can only
    interact with other characters provided they are in the same location. OOC local chat will also
    be per-location.
*** TODO Location transitions
    Changing locations should have a couple of effects:
**** TODO Scene transition.
     The actor who is moving from point A to point B should receive a short scene-transition
     message, which should be properly formatted as a transition.
**** TODO Slug lines and descriptions
     Upon entering the new area, the actor who moved should receive both a new slug line (displayed
     after the transition message), followed by the new location's description.
**** TODO Hi, I'm here!
     Once the actor has transitioned into the new location, everyone, including the actor, should
     receive a "X arrives." message. This'll eventually be extended to provide fancier, nicer
     transitions, but an arrival message is good enough for now.
*** TODO OOC messaging
    Once we have locations, you won't be able to chat with everyone and anyone anymore -- including
    OOCly. Still, it would be nice to be able to send messages to other players. For that purpose,
    an OOC messaging system should be implemented.
** Websockets
*** TODO Refactor code to use a simple CouchDB-view-server-like protocol.
    Just so we have a nice open window for expansion. Something like
    ["message_type","contents"]. It'll allow things like ["ping",1], as well as any future
    non-chat-related commands we may want to send down the pipe. It might also be useful for doing
    any HTML rendering client-side, instead of having the webserver generate the markup.
*** TODO Possibly-optional websocket ping to keep the socket alive even when idle.
*** TODO Better disconnect-client
    It shouldn't be using ws::client-disconnect. Until a better force-boot alternative pops up,
    though, _3b recommends that I just send a custom CLOSE message to the client, and close up the
    socket client-side.
*** TODO Fix clws to work on CCL.
*** TODO Optional Flash loading
    Things got messed up when I tried to have optional loading of Flash. Give it another shot.
*** TODO FUTURE make clws support socket.io protocol.
    socket.io has a client that automagically detects the right tools to use for different
    browsers. If clws supports socket.io's protocol, then rainbows will be shat, and even IE 5.5 and
    all the mobile browsers will be supported! This would probably take a bit of effort, and so is
    probably better left to near-launch. Websockets + Flash sockets is good enough for now.
** Webapp
*** TODO Templatify code
    belletrist.lisp is starting to look like a big ball of pseudo-HTML in some places. It might be
    worthwhile to start looking into moving that HTML out into template, or pseudo-template files.
*** TODO New template system
    All templating systems suck. This one won't. No logic goes into a template, and templates should
    be kept small (like functions). Additionally, multiple templates will be kept in a single file,
    which will generate either lisp functions or CLOS objects to correspond to each individual
    template, which the programmer can compose with the logic (much like pages are strung together
    with logic). The template files will basically look like lisp files, and require parameter
    declaration for clarity, as well as accept an optional docstring.
   
    Example:
    (deftempl standard-page (title head-contents body-contents)
      "This template renders the standard page thingy."
      <html>
        <head>
          <title>{title}</title>
          {head}
        </head>
        <body>
        {body-contents}
        </body>
      </html>)
   
    The above can be loaded (probably with a special reader macro), and could then create a function
    to be called on a stream, with the required parameters:
    (load "page.templ")
    (render-template 'standard-page *standard-output* :title "My special page" :body-contents "<p>Hello, World!</p>")
   
    Question: Do even minor instances of HTML need to be templated out?
*** TODO Loading screen
    Instead of alerts, replace the chat box with 'loading...' until the websocket is connected, then
    show the whole chat box.
*** TODO Smaller timeout for ajax ping.
    Those AJAX pings will stay alive for freakin' ever. Make them time out quicker.
*** TODO Styling
    Seriously. Make things -not- look like utter shit.
** Chillax
*** DONE Fix the goddamn view server.
    It's switching the order of map functions in a view. :(
*** TODO Figure out why the hell the view server is freezing up
*** TODO Build a view server that uses jsown.
    JSOWN ftw. For bonus points, make the view server *not* decode JSON by default, for top speed.
*** TODO Convert view code to use jsown, too.
    Because using mkhash in one place and mkdoc in another sucks.
