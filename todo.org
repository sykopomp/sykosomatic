* Tasks
** Pages
*** /newchar
**** TODO Configuration UI
     Set up a nice web interface that waifu can use to do basic CRUD on all the different character
     creation options.
**** TODO Create appropriate entities and modifiers
**** TODO (Maybe) Previews
    Each section should have an informative preview that shows how the player's selections are
    affecting something about the character. Refer to waifu's handy-dandy notes for specifics.
***** TODO Identity
     Have a sentence that is auto-updated as they pick things from the dropdown and type in a name.
     Something like "You are creating a new character. His name is Thomas Janus, also known as
     'Wolf'."
***** TODO Early Life
     A sentence that gives a basic blurb about the character's family and childhood information,
     which also includes the identity:
     "Thomas grew up in a middle class family of three children by his two parents."
***** TODO Later Life
     "Now Thomas is a <age determined by career> year old. He has some acquaintances, but no one
     really very close. He is also currently seeing someone. He has spent 10 years in Business."
***** TODO Here and Now
     For this one, show an interactive map of the Twin Cities. Perhaps start with a short snippet
     about what the Twin Cities are, and maybe even some outside links to more information. There
     should be various places marked on the map, each corresponding to a possible starting location
     for the character. Maybe have these places marked by Google Maps-style drops/pins.  Clicking
     on a location or choosing it from the dropdown makes it the current selection, and also
     displays a short paragraph with more information about what the place is like -- something to
     give the player an idea of why it sets it apart from the other locations.
***** TODO Confirm
     Summarize all the other stuff that was accumulated during character creation, and have the
     player confirm their decision. The actual submit button will be in here.

**** TODO Proper inputs
    Replace the mass of text input fields with appropriate stuff like dropdowns.
***** TODO Careers
****** TODO Use jQuery UI 1.9's spinner widget for number input
       meh. Maybe wait for 1.9 to get released.
***** TODO Location
****** TODO Draw up a map of the area
****** TODO Highlight places in the map according to selection
****** TODO Expand description of place according to selection
***** TODO Headings
      I think headings are supposed to be helpful for folks using screen readers and the like. Look
      into this, and add them where appropriat
**** TODO Disable 'add' buttons when appropriate
*** /my-account
    Need to have this page to manage account information.
**** TODO Allow changing of display name.
**** TODO Allow changing passwords.
**** TODO More involved user bio?
*** /recover-password
**** TODO Set up an email-based password recovery system
*** /view-scene
**** TODO Scene editing
     I like the idea of rendering each 'sentence'/unit as a targetable DOM element (such as SPANs
     for sentences in a paragraph), and using jQuery UI to make those units individually
     draggable. I don't think I want to allow full editing of scenes (might feel like it defeats the
     purpose of -playing- the scenes if you can just -write- them), but this might be a really neat
     feature that allows cleaning up garbage without giving too much freedom (or requiring too much
     effort to handle formatting, and the like).
** Websocket client
*** TODO Parser, JS-side
     See sketch on whiteboard.

     Basically, the parser is less text-based and more text-guided. An interactive completion system
     will ensure that all items are uniquely chosen before the final message is even sent.  This
     will probably involve caching of at least part of the game's vocabulary client-side, but we'll
     take that step when it's necessary.
**** TODO Action completion
     With the 'full' parser in place, revisit command completion and see if there's a way to
     autocomplete large, complex sentences.
**** TODO Add completion features to dialogue input area
**** TODO (maybe) In the completion popup, group matches by verb and by adverb
     Kinda like an <optgroup>. jquery-ui's autocomplete supports this.
     NOTE: Maybe in the future. Whole-sentence is easier for now. :\
*** TODO Semantic markup for game area
    This should probably include changes to the command output functions such that they're not
    simple string concatenations. Actual objects/ids should be passed around, which a command
    rendering engine will then take care of converting into tagged text.
    Perhaps all that is needed is an sexp/xml tagging system that will 'mark up' zones of the output
    text semantically.

    Examples:
      - '(:e 12345 John Doe) (:verb jumps) to (:e 4322 Jane).'
      - '<e id='12345'>John Doe</e> <verb>jumps</verb> to <e id="4322">Jane</e>.'

    Probably just do the former for now, since it's nicer to deal with, and handle the xml version
    later.
*** TODO (re)design client
    The UI is currently all sorts of awful. The currently-necessary components should be gathered,
    and decent designs should be agreed upon for all of it. Waifu recommends brainstorming sessions
    followed by user testing. Not sure how much user testing we can do, but even a little bit
    helps. Maybe pick something not-too-awful and then start doing honest user testing once we have
    a few early testers?
*** TODO Give client.js a once-over.
    Probably worth revisiting the way things are being 'exported' and the like. Some of the stuff in
    that file might be useful in other pages, as well. Perhaps it should actually be used as a
    shared library of sorts. Maybe also rename it to sykosomatic.js?
*** TODO If the current entity's name changes in the database, tell the client
    A nice message through the websocket to update the client's display.
*** TODO Scene headers
**** TODO Add a scene-header server->client message
     Should include the url for an image to load and the name of the location.
**** TODO Get client to render the scene header.
*** TODO Make sure a user is chatting as a character only once.
*** TODO Back-button-friendliness
     When you leave the chat page, the websocket is disconnected. If you press 'back', though, the
     input fields are enabled, as if the websocket connection were still up. Perhaps there's a
     javascripty way to reconnect the websocket on back-button?
     Maybe this could be achieved with disabled=true by default for chat inputs?
*** TODO No Flash on native-websocket browsers
     Things got messed up when I tried to have optional loading of Flash. Give it another shot.
*** TODO Sticky scene headers
     Ideally, scene headers will 'stick' to the top of the screen when the entire screen belongs to
     a particular scene -- always leaving clue of where the player currently is.  As new scene
     headers appear, they should scroll up regularly, and 'bump' off the older sceneheader as they
     reach the top of the screen, sticking there until the next header rolls by.
*** TODO Character conversion
     Convert -- to â€”.
*** TODO Do something about the awful OOC area.
*** TODO Scene recording
**** TODO Select area to record
**** TODO Scene naming
     Add ability to change the name of the recorded session.
     NOTE: Perhaps more important than this -- descriptions? I'll do this later.
*** TODO FUTURE WAI-ARIA support
     The web client should play nice with screen readers.
*** TODO FUTURE define a language-agnostic command definition protocol (a-la-couchdb)
*** TODO FUTURE Client customization by users
** Misc Webapp work
*** TODO Sessions
**** TODO Concurrent session/session history information
     Since sessions last a long time, have a screen where a user can log out all other active
     sessions.
**** TODO Log out all sessions on username or password change
*** TODO Email system
    Need a way to send emails out to people. Various things in the site will need this.
*** DONE Form builder
**** DONE Basic form builder
     Need: string-param-binding support, simple definition form, validation support, raw and
     validated values, error string reporting, form-valid-p.
**** DONE Test run form builder with signup
***** DONE Convert validation in account.lisp
***** DONE How do I deal with packages?
      Should field values be package-dependent, or ignore packages altogether? They're already bound
      in a package-independent way. Pomo doesn't bother with packages, either.
      LOL JUST USE KEYWORDS DUH :D :D :D
***** DONE Hook it up to handlers/signup.lisp
***** DONE Update the signup template to use the form object
****** DONE Repopulate based on form object raw-values
****** DONE Display errors in-line with form fields
***** DONE Initial form state
      If the form hasn't received any parameters, it should not display any errors.
***** DONE Password confirmation needs access to password field
**** DONE Test run form builder with newchar
***** DONE list parameter type for deform
***** DONE array parameter type for deform
      Simply use the same method as hunchentoot to collect elements into an array. Let the validators
      do any integer parsing that we might want to do.
***** DONE Figure out full repopulation
      This one might get a little tricky... but various builder screens will have a similar
      interface, so it's important to figure this one out.
      Eh. It's probably easy enough. For features, may need a bit of javascript to force the AJAX
      requests for adjectives.
*** TODO Use 'real' templates
    Enough of yaclml. Maybe using yaclml is okay for a limited subset of generated components, but
    most templates should be in their own files, organized by webpage names. Give tal a shot for
    this. Whatever ends up being used, it may need to be extended in order to support the form builder.
*** TODO Logging system
    Need to add a robust way to log server errors/notices/warnings in a more sysadmin-friendly way.
*** TODO Figure out how to put the server behind stud
    URL: https://github.com/bumptech/stud
*** TODO Figure out how to configure two lisp processes running behind HAProxy
*** TODO Use a couple of lisps with single-threaded-taskmaster instances
** Game
*** TODO Parser
**** TODO Possessives
     Allow chained possessives parsing.

     NOTE: this needs game objects that can -have- possessives. Do it later.
**** TODO Figure out exactly which characters will be allowed in vocabulary words and object names.
      And put them in a shared place (sykosomatic.vocabulary?) that all other modules can use when
      parsing/validating.
**** TODO present participle support for parenthetical
     participle-form actions should be acceptable in dialogue parentheticals. This could probably
     support the entire action system.

     Example: (laughing at X) You sure messed that up!

     To support this, a participle column should be added to verbs to store the regular or irregular
     present participle forms of each verb.
**** TODO When no participle is present, treat parenthetical as the verb "say"

**** TODO Memory-cache vocabulary
     Start with closed classes: Keep all pronouns and adverbs in-memory.

     Figure out how much memory having all verbs and adverbs in-memory would take. If it seems
     reasonable, write them out to the database for storage, but work off the in-memory version.

     That should help speed up the parser, hopefully.

**** TODO Support compound verbs
      "wave off", "give up", "give in", "pick up"
      "X waves Y off" is possible, although "X waves off Y" is good enough.
      "pick up" is definitely desirable. "up" is just an adverb, though.

      For more ideas on how to deal with these:

      https://secure.wikimedia.org/wikipedia/en/wiki/Phrasal_verb
**** TODO FUTURE Command overrides
     Instead of putting command associations into verbs, make a command-association table that maps
     verbs to command names. This table should also include columns for most (if not all) of the
     action parameters. These can then be used to create 'multimethods' of sorts: By querying for
     specific parameters, default commands can be shadowed. For example, one could write a 'method'
     where a certain combination of actor/direct-object will yield a specific result. In general,
     this should not be used, but it may become handy when very-special-code is needed.
**** TODO (maybe) Improve error reporting
     For what it's worth... this may be a waste of time, if all input has to be fully 'completed'
     once we have the full game frontend. If that's the case, we can just ignore erroneous input
     because it means the player has bypassed the standard client.
***** TODO Do something about that ENOPARSE garbage
***** TODO When an adverb is wrong and a verb is write, report it as such
      If someone enters 'merrly jumps', it should properly report the error as 'merrly is not an
      adverb', instead of 'merrly is not a verb'.

*** TODO Commands
**** DONE Write defcommand social
     This command, when attached to a verb, will simply reconstruct the sentence using the dynamic
     variable parameters for commands.
**** TODO Write unit tests for defcommand social
     ...Somehow, but it'll define the framework for testing other defcommands!
*** TODO Fix timer
    It's not quite working right now, although there's a reasonable rate limit. that might be okay
    for now.
*** TODO Cleaner es-thread shutdown
    Don't just murder the thread when we want to murder it. Get it to shut down cleanly.
*** TODO Add concept of a 'location'
    Once characters exist, we can start adding the concept of a 'location' to the game. Locations
    should have a description, and should be able to 'contain' other characters. Characters can only
    interact with other characters provided they are in the same location.
*** TODO Put characters in a location
*** TODO Limit dialogue/action interactions to same location
*** TODO Location transitions
    Changing locations should have a couple of effects:
**** TODO Scene transition.
     The actor who is moving from point A to point B should receive a short scene-transition
     message, which should be properly formatted as a transition.
**** TODO Slug lines and descriptions
     Upon entering the new area, the actor who moved should receive both a new slug line (displayed
     after the transition message), followed by the new location's description.
**** TODO Hi, I'm here!
     Once the actor has transitioned into the new location, everyone, including the actor, should
     receive a "X arrives." message. This'll eventually be extended to provide fancier, nicer
     transitions, but an arrival message is good enough for now.
*** TODO Location building.
    Write an interface that can be used to easily build and connect locations.
*** TODO Persistent scenes
    NOTE: This'll need to be done *after* characters are implemented.
    Players should be able to 'record' scenes, which will be saved as they see them. These scenes
    should be viewable in a separate page (for phase 1). Would be nice to also have them formatted
    as screenplays.
    Not all user messages must (or should) be saved. Instead, create a 'recorded session' document,
    and then record each line of input that the character is witness to into 'entry' documents,
    which can then be collated with the recorded session as outlined in the CouchDB Joins article.
**** TODO Revive persistent scenes
     Haven't been tested since pomo switch
**** TODO Automatically add slug lines.
     Even if the user starts recording a while after entering an area, the recorded scene should
     include the slug line for that area. Will probably have to wait until we have locations. :)
**** TODO Automatically add location description under slug line.
     May need to wait until locations are implemented (although no harm in having some default text
     for now). Under the slug line for persisted scenes, the description of the location, as seen by
     the character at that point in time, should be included at the top of the scene.
**** TODO Scene collection
     Users should be able to 'collect' others' stories, much like in DA.
**** TODO FUTURE "Canon" system.
    While people can tell any story they want, how about giving extra weight to stories that fit the
    game's canon, and/or are staff approved?
*** TODO AI
    Build a behavior tree (http://aigamedev.com/open/article/behavior-trees-part1/) system for
    dealing with AI entities.
** Game Building
*** TODO Component manager
    Parts of the game should be split into components (things like nameable, describable,
    weight/size, combat stats, contents, all being components).
    Components can be arbitrarily added/removed through a web interface, and each component should
    have a custom data editor for configuration.
    Components can be represented by block areas in a single entity editor screen. Or something like
    that. Should also have entity searching features.
    Sounds like a generic component registration system is needed that includes a particular API,
    built forms, etc.
*** TODO Vocabulary manager
    A manager for doing CRUD on vocabulary words, configuring what commands verbs are attached to
    (and possibly viewing the source code for the commands, or at least the documentation for them).
*** TODO Room builder
    A dedicated entity editor meant for linking together various rooms, with a nicer view than just
    using the raw component manager. You should be able to do all that this screen can do with the
    component manager, though.
** Database
*** TODO Remove s-sql patch
    Waiting until the new pomo makes it into a quicklisp release.
*** TODO Look into offering my pooling improvements to postmodern
    Postmodern already has a pooled connection system. Look at it a little closer and figure out how
    it might benefit from my own pooling system (and/or if it's worth using instead of my own
    pooling system).
*** TODO Figure out a cleaner way of 'passing through' s-sql stuff
*** TODO Nameable must-refresh-full-name constraint?
    Is it possible to put in a constraint that prevents updates of nameable if a new full-name is
    not provided? Most likely, I'll need to write a trigger that does this.
** Security
   https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines Has a nice overview of security
   concerns and mitigations.
*** TODO Password hashing
    Confirm that the current password hashing algorithm is as secure/more secure than the 'standard'
    bcrypt method.
*** TODO nonce
    The mozilla guidelines recommend storing the nonce elsewhere in the filesystem. Consider using
    couchdb to store nonces for user passwords.
*** TODO Clickjacking
    x-frame-options to prevent malicious site framing. (see mozilla guidelines)
*** TODO Content security policy
    https://developer.mozilla.org/en/Introducing_Content_Security_Policy
*** TODO Secure cookies
    Since we'll probably not be doing hunchentoot-level SSL, the session mechanism should be
    adjusted so that cookies are always secure (but this can't happen until there's a working TLS
    system in place, for development)
*** TODO HTTPS
    May not need/want hunchentoot managing this. Check out http://haproxy.1wt.eu/, which supposedly
    supports both https and wss.
*** TODO XSS
    There should be a specific method of handling all user input, and all redisplaying of
    server-side data such that XSS is not possible. This should be handled within the
    infrastructure.
**** TODO De-XSS-ify server-side generated HTML.
     This involves using yaclml's <:ah
*** TODO CSRF
    Nothing to defend against this right now. Most likely, the form builder should have something
    built-in that manages and checks tokens.
*** TODO Injection
    This is mostly taken care of by using s-sql. Keep an eye out, though. Looks like (:raw) is
    mostly protected as well, thanks to the whole (wrapping) thing. :D
*** TODO DoS
**** TODO Throttle user input.
     Length and regularity of user input should be somewhat limited, so players can't just spam a
     ton of garbage onto the screen.

*** TODO Malicious websocket clients
    The websocket client should not leak anything the player would not already be able to do through
    the interface. Object identities should be hidden somehow.
    
*** TODO Logout
    Expire/delete the session cookie upon logout.
*** TODO Security logging
    https://wiki.mozilla.org/Security/Users_and_Logs (note that newlines should be escaped to
    prevent log forging)
** Misc
*** TODO def-file-package improvements
**** TODO Ability to disable defaults for def-file-package
**** TODO Is it possible to extract the package name from the -filename-?
*** TODO Move persistent sessions out into a separate lisp project
*** TODO Move timer.lisp into an external project
*** TODO Merge smug.lisp changes into mainline smug and use that version instead
*** TODO Actual config file system for local configs
* TODO The generated.html Challengeâ„¢
  The point of this challenge is to have enough of a working system to render the contents of
  generated.html *AS IT LOOKS*. That includes the scene header, highlighting objects,
  parentheticals, complex verbs, and proper styling. Additionally, all *bold* words should
  correspond to actual game objects that, when clicked, make a description request to the server
  (which does not need to return anything useful right now -- the client just needs to be able to
  have enough semantic information about the object to ask the server about it).
  
  All verbs can be purely social for now.

  Can safely ignore the inputs area. Don't worry about completion, better input fields, etc.

  Bonus points: Have all objects reside in an actual location, although transitioning between
  locations is not necessary yet.

*** TODO Semantic output
**** TODO Semantic markup from social command
     Have social command output a marked-up string that annotates any words of interest in the
     sentence with their roles. For now mark the verb and individual objects.
**** TODO Use semantic markup when rendering client-side
     Instead of spitting out a markup-filled string, parse the action output and generate
     appropriate html markup with the right classes. No description links yet.
**** TODO Add description onclicks
     When you click a game object, the client should ask the server for that object's description
     and render the description in a popup.
*** TODO Update parenthetical parsing
    There's TODO items involving parsing parentheticals as special kinds of actions. Get those items
    wrapped up.

*** TODO complex verbs
    "sits down" must be supported. Whatever it takes.

*** TODO Pronouns
    Play around with using pronouns for multiple consecutive actions by the same actor.
*** TODO Make it look right
    Update the stylesheets
**** TODO Spacing between dialogues
**** TODO Colors/emphasis for objects in actions
**** TODO Colors/emphasis for stuff in parentheticals
*** TODO Scene headers
**** TODO Protocol
     Add a scene-header protocol thing for requesting and receiving information required to render a
     location's header image and description.
**** TODO Render it
     Make it render right.
