* Hack challenge
** TODO Get Ye Flask
   Through the web interface, have character look at and pick up a flask in its current room.
* Tasks
** Pages
*** /newchar
**** TODO Configuration UI
     Set up a nice web interface that waifu can use to do basic CRUD on all the different character
     creation options.
**** TODO Create appropriate entities and modifiers
**** TODO (Maybe) Previews
    Each section should have an informative preview that shows how the player's selections are
    affecting something about the character. Refer to waifu's handy-dandy notes for specifics.
***** TODO Identity
     Have a sentence that is auto-updated as they pick things from the dropdown and type in a name.
     Something like "You are creating a new character. His name is Thomas Janus, also known as
     'Wolf'."
***** TODO Early Life
     A sentence that gives a basic blurb about the character's family and childhood information,
     which also includes the identity:
     "Thomas grew up in a middle class family of three children by his two parents."
***** TODO Later Life
     "Now Thomas is a <age determined by career> year old. He has some acquaintances, but no one
     really very close. He is also currently seeing someone. He has spent 10 years in Business."
***** TODO Here and Now
     For this one, show an interactive map of the Twin Cities. Perhaps start with a short snippet
     about what the Twin Cities are, and maybe even some outside links to more information. There
     should be various places marked on the map, each corresponding to a possible starting location
     for the character. Maybe have these places marked by Google Maps-style drops/pins.  Clicking
     on a location or choosing it from the dropdown makes it the current selection, and also
     displays a short paragraph with more information about what the place is like -- something to
     give the player an idea of why it sets it apart from the other locations.
***** TODO Confirm
     Summarize all the other stuff that was accumulated during character creation, and have the
     player confirm their decision. The actual submit button will be in here.

**** TODO Proper inputs
    Replace the mass of text input fields with appropriate stuff like dropdowns.
***** TODO Careers
****** TODO Use jQuery UI 1.9's spinner widget for number input
       meh. Maybe wait for 1.9 to get released.
***** TODO Location
****** TODO Draw up a map of the area
****** TODO Highlight places in the map according to selection
****** TODO Expand description of place according to selection
***** TODO Headings
      I think headings are supposed to be helpful for folks using screen readers and the like. Look
      into this, and add them where appropriat
**** TODO Disable 'add' buttons when appropriate
*** /stage
**** TODO Instead of using web session, make web clients identify with a single-use token.
**** TODO Make sure a user is chatting as a character only once.
**** TODO Back-button-friendliness
     When you leave the chat page, the websocket is disconnected. If you press 'back', though, the
     input fields are enabled, as if the websocket connection were still up. Perhaps there's a
     javascripty way to reconnect the websocket on back-button?
     Maybe this could be achieved with disabled=true by default for chat inputs?
**** TODO Fancy JS 'parser'
     See sketch on whiteboard.

     Basically, the parser is less text-based and more text-guided. An interactive completion system
     will ensure that all items are uniquely chosen before the final message is even sent.  This
     will probably involve caching of at least part of the game's vocabulary client-side, but we'll
     take that step when it's necessary.

     The parser should use something chosen-like as an interface, but more typing-oriented.
**** TODO No Flash on native-websocket browsers
     Things got messed up when I tried to have optional loading of Flash. Give it another shot.
**** TODO Sticky scene headers
     Ideally, scene headers will 'stick' to the top of the screen when the entire screen belongs to
     a particular scene -- always leaving clue of where the player currently is.  As new scene
     headers appear, they should scroll up regularly, and 'bump' off the older sceneheader as they
     reach the top of the screen, sticking there until the next header rolls by.
**** TODO Character conversion
     Convert -- to â€”.
**** TODO Do something about the awful OOC area.
**** TODO FUTURE WAI-ARIA support
     The web client should play nice with screen readers.
**** TODO Scene recording
***** TODO Select area to record
***** TODO Scene naming
     Add ability to change the name of the recorded session.
     NOTE: Perhaps more important than this -- descriptions? I'll do this later.
*** /my-account
    Need to have this page to manage account information.
**** TODO Allow changing of display name.
**** TODO Allow changing passwords.
**** TODO More involved user bio?
*** /recover-password
**** TODO Set up an email-based password recovery system
*** /view-scene
**** TODO Scene editing
     I like the idea of rendering each 'sentence'/unit as a targetable DOM element (such as SPANs
     for sentences in a paragraph), and using jQuery UI to make those units individually
     draggable. I don't think I want to allow full editing of scenes (might feel like it defeats the
     purpose of -playing- the scenes if you can just -write- them), but this might be a really neat
     feature that allows cleaning up garbage without giving too much freedom (or requiring too much
     effort to handle formatting, and the like).
** Misc Webapp work
*** TODO Email system
    Need a way to send emails out to people. Various things in the site will need this.
*** TODO Form builder
    Need a form builder that supports validation, error reporting, rendering, and CSRF tokens. This
    can be an independent library. freiksenet says he'll do it.
*** TODO Use 'real' templates
    Enough of yaclml. Maybe using yaclml is okay for a limited subset of generated components, but
    most templates should be in their own files, organized by webpage names. Give tal a shot for
    this. Whatever ends up being used, it may need to be extended in order to support the form builder.
*** TODO Generic form component/handler interface
    I want to be able to define forms and their fields once, and have those easily hook up to a
    template for layout, and easily hook up to a handler and its parameters, so I don't have to
    repeatedly pass around all the values. It should also automagically take care of validation and
    validation error reporting, and reloading values into the form. (should reload all values by
    default, unless a :noreload flag or something is provided)
*** TODO Put locks on session value and finalizer hash tables
*** TODO Smaller timeout for ajax ping.
    Those AJAX pings will stay alive for freakin' ever. Make them time out quicker.
** Game
*** TODO Persistent scenes
    NOTE: This'll need to be done *after* characters are implemented.
    Players should be able to 'record' scenes, which will be saved as they see them. These scenes
    should be viewable in a separate page (for phase 1). Would be nice to also have them formatted
    as screenplays.
    Not all user messages must (or should) be saved. Instead, create a 'recorded session' document,
    and then record each line of input that the character is witness to into 'entry' documents,
    which can then be collated with the recorded session as outlined in the CouchDB Joins article.
**** TODO Revive persistent scenes
     Haven't been tested since pomo switch
**** TODO Automatically add slug lines.
     Even if the user starts recording a while after entering an area, the recorded scene should
     include the slug line for that area. Will probably have to wait until we have locations. :)
**** TODO Automatically add location description under slug line.
     May need to wait until locations are implemented (although no harm in having some default text
     for now). Under the slug line for persisted scenes, the description of the location, as seen by
     the character at that point in time, should be included at the top of the scene.
**** TODO Scene collection
     Users should be able to 'collect' others' stories, much like in DA.
**** TODO FUTURE "Canon" system.
    While people can tell any story they want, how about giving extra weight to stories that fit the
    game's canon, and/or are staff approved?
*** TODO Entities
    Time to start coding up some game objects!
    http://t-machine.org/index.php/2010/05/09/entity-system-1-javaandroid/ might be good to read.
**** TODO Get the old code to work again with new entity system
**** TODO Fix timer
     It's not quite working right now, although there's a reasonable rate limit. that might be okay
     for now.
**** TODO Cleaner es-thread shutdown
     Don't just murder the thread when we want to murder it. Get it to shut down cleanly.
**** TODO Hook up the parser to the entity system.
***** TODO Allow parser to target characters by name.
***** TODO Allow parser to target locations by name.
*** TODO Add concept of a 'location'
    Once characters exist, we can start adding the concept of a 'location' to the game. Locations
    should have a description, and should be able to 'contain' other characters. Characters can only
    interact with other characters provided they are in the same location.
*** TODO Put characters in a location
    Add several locations. Allow characters to interact only with other characters present in the
    current location.
*** TODO Location transitions
    Changing locations should have a couple of effects:
**** TODO Scene transition.
     The actor who is moving from point A to point B should receive a short scene-transition
     message, which should be properly formatted as a transition.
**** TODO Slug lines and descriptions
     Upon entering the new area, the actor who moved should receive both a new slug line (displayed
     after the transition message), followed by the new location's description.
**** TODO Hi, I'm here!
     Once the actor has transitioned into the new location, everyone, including the actor, should
     receive a "X arrives." message. This'll eventually be extended to provide fancier, nicer
     transitions, but an arrival message is good enough for now.
*** TODO Location building.
    Write an interface that can be used to easily build and connect locations.
** Database
*** TODO Remove s-sql patch
    When/if marijn accepts my pull request.
*** TODO new defdao macro
    Simplify common-case definition based on the currently-established usage pattern.

    Something like:

    (defdao tablename ()
      ((entity-id bigint)
       (my-value (or db-null text))
       (is-it-true-p boolean :col-default nil)
       (last-column boolean t :reader last-column :documentation "Last chance."))
      (:keys id))

    This should generate :initarg and :col-type using the available info, and accept
    other slot arguments after that.
*** TODO don't use postmodern directly
    Wrap any postmodern-specific calls so only :sykosomatic.db needs to be included. This includes
    stuff like automatic transaction 
** Security
*** TODO HTTPS
    May not need/want hunchentoot managing this. Check out http://haproxy.1wt.eu/, which supposedly
    supports both https and wss.
*** TODO XSS
    There should be a specific method of handling all user input, and all redisplaying of
    server-side data such that XSS is not possible. This should be handled within the
    infrastructure.
**** TODO De-XSS-ify server-side generated HTML.
     This involves using yaclml's <:ah
*** TODO CSRF
    Nothing to defend against this right now. Most likely, the form builder should have something
    built-in that manages and checks tokens.
*** TODO Injection
    This is mostly taken care of by using s-sql. Keep an eye out, though. Looks like (:raw) is
    mostly protected as well, thanks to the whole (wrapping) thing. :D
*** TODO DoS
**** TODO Throttle user input.
     Length and regularity of user input should be somewhat limited, so players can't just spam a
     ton of garbage onto the screen.

*** TODO Malicious websocket clients
    The websocket client should not leak anything the player would not already be able to do through
    the interface. Object identities should be hidden somehow.
    

** Misc
*** TODO Move persistent sessions out into a separate lisp project
