(test:def-test-package util.form
  (:use :sykosomatic.util.form))

(test deform
  (finishes (deform test-form ()
              ()))
  (finishes (deform test-form ()
              ((field (lambda (val) val)))))
  (defun field-test (val)
    val)
  (finishes (deform test-form ()
              ((field 'field-test))))
  (flet ((field-test (val)
           val))
    (finishes (deform test-form ()
                ((field #'field-test)))))
  (defun field-test (val &rest more-args)
    (cons val more-args))
  (finishes (deform test-form ()
              ((field 'field-test 'arg1 'arg2 'arg3))))
  (fmakunbound 'field-test)
  (flet ((validator (val)
           val))
    (finishes (deform test-form ()
                ((field #'validator))))))

(test check-field
  (let (last-check-field)
    (flet ((field-test (val)
             (check-field (progn
                            (setf last-check-field "first")
                            (string= "expected" val))
                          "~A was unexpected." val)
             (check-field (progn
                            (setf last-check-field "second")
                            (string= "something-else" val))
                          "Something else was received.")
             val))
      (deform test-form ()
        ((field #'field-test)))
      (make-form 'test-form)
      (is (null last-check-field))
      (make-form 'test-form '(("field" . "unexpected")))
      (is (string= "first" last-check-field))
      (make-form 'test-form '(("field" . "expected")))
      (is (string= "second" last-check-field)))))

(test *form*
  (is (null (boundp '*form*)))
  (flet ((password-confirm (val)
           (check-field (string= val (field-raw-value *form* 'password))
                        "Confirmation does not match password.")
           val))
    (deform test-form ()
      ((password #'identity)
       (confirmation #'password-confirm)))
    (is (form-valid-p (make-form 'test-form '(("password" . "foo")
                                              ("confirmation" . "foo")))))
    (is (equalp '((confirmation . "Confirmation does not match password."))
                (form-errors (make-form 'test-form '(("password" . "foo")
                                                     ("confirmation" . "bar"))))))))

(test make-form
  (flet ((field-test (val)
           (check-field (string= "expected" val) "~A was unexpected." val)
           val))
    (deform test-form ()
      ((field #'field-test)))
    (finishes (make-form 'test-form))
    (finishes (make-form 'test-form '()))
    (finishes (make-form 'test-form '(("field" . "expected"))))
    (finishes (make-form 'test-form '(("field" . "unexpected"))))
    (finishes (make-form 'test-form '(("unknown-field" . "unexpected"))))
    (finishes (make-form 'test-form '(("field" . "expected")
                                      ("unknown-field" . "unexpected"))))))

(test form-valid-p
  (flet ((field-test (val)
           (check-field (string= "expected" val) "~A was unexpected." val)
           val))
    (deform test-form ()
      ((field #'field-test)))
    (is (null (form-valid-p (make-form 'test-form))))
    (is (null (form-valid-P (make-form 'test-form '(("field" . "unexpected"))))))
    (is (form-valid-p (make-form 'test-form '(("field" . "expected")))))
    (is (form-valid-p (make-form 'test-form '(("FIELD" . "expected")))))
    (is (form-valid-p (make-form 'test-form '(("FielD" . "expected")))))
    (is (form-valid-p (make-form 'test-form '(("FielD" . "expected")
                                              ("extra" . "anything")))))
    (deform test-form ()
      ((field-a #'field-test)
       (field-b #'field-test)
       (field3 (lambda (val) val))))
    (is (form-valid-p (make-form 'test-form '(("field-a" . "expected")
                                              ("field-b" . "expected")
                                              ("field3" . "expected")))))
    (is (form-valid-p (make-form 'test-form '(("field-a" . "expected")
                                              ("field-b" . "expected")))))
    (is (null (form-valid-p (make-form 'test-form '(("field-a" . "expected"))))))))

(test form-errors
  (flet ((field-test (val)
           (check-field (string= "expected" val) "validation-failed")
           val))
    (deform test-form ()
      ((field #'field-test)))
    (is (null (form-errors (make-form 'test-form))))
    (is (= 1 (length (form-errors (make-form 'test-form nil)))))
    (is (equalp '((field . "validation-failed"))
                (form-errors (make-form 'test-form '(("field" . "unexpected"))))))
    (deform test-form ()
      ((field1 #'field-test)
       (field2 #'field-test)))
    (is (= 1 (length (form-errors (make-form 'test-form '(("field1" . "expected")
                                                          ("field2" . "unexpected")))))))
    (is (equalp '((field2 . "validation-failed"))
                (form-errors (make-form 'test-form '(("field1" . "expected")
                                                     ("field2" . "unexpected"))))))
    (is (= 2 (length (form-errors (make-form 'test-form '(("field1" . "unexpected")
                                                          ("field2" . "unexpected")))))))
    (is (every (compose (curry #'string= "validation-failed") #'cdr)
               (form-errors (make-form 'test-form '(("field1" . "unexpected")
                                                    ("field2" . "unexpected"))))))))

(test field-error
  (flet ((field-test (val)
           (check-field (string= "expected" val) "validation-failed ~A" val)
           val))
    (deform test-form ()
      ((field1 #'field-test)
       (field2 #'field-test)))
    (let ((form (make-form 'test-form '(("field1" . "foo")
                                        ("field2" . "expected")))))
      (is (string= "validation-failed foo" (field-error form 'field1)))
      (is (null (field-error form 'field2))))))

(test field-raw-value
  (flet ((always-error (val)
           (check-field nil "asprode")
           val)
         (as-int (val &aux *read-eval*)
           (let ((int (ignore-some-conditions (parse-error)
                        (parse-integer val))))
             (check-field int "~A is not a valid integer." val)
             int)))
    (deform test-form ()
      ((whatever #'identity)
       (error-field #'always-error)
       (int-field #'as-int)))
    (let ((form (make-form 'test-form '(("whatever" . "a")
                                        ("error-field" . "b")
                                        ("int-field" . "42")))))
      (is (string= "a" (field-raw-value form 'whatever)))
      (is (string= "b" (field-raw-value form 'error-field)))
      (is (string= "42" (field-raw-value form 'int-field))))))

(test field-value
  (flet ((always-error (val)
           (check-field nil "asprode")
           val)
         (as-int (val &aux *read-eval*)
           (let ((int (ignore-some-conditions (parse-error)
                        (parse-integer val))))
             (check-field int "~A is not a valid integer." val)
             int)))
    (deform test-form ()
      ((whatever #'identity)
       (error-field #'always-error)
       (int-field #'as-int)))
    (let ((form (make-form 'test-form '(("whatever" . "a")
                                        ("error-field" . "b")
                                        ("int-field" . "42")))))
      (is (string= "a" (field-value form 'whatever)))
      (is (null (field-value form 'error-field)))
      (is (eql 42 (field-value form 'int-field))))))
