* Features
** Misc
*** DONE s/belletrist/sykosomatic/
    It is time.
*** DONE Factor out db-related stuff from account.lisp into db.lisp
    Give it its own package, too.
** Accounts
*** DONE Account creation
**** DONE Use emails as logins, and replace usernames with 'display names'.
**** DONE Limit characters and number of characters allowed for usernames and passwords
**** DONE Prevent duplicate account creation.
*** TODO Allow changing passwords.
*** TODO Password recovery.
*** DONE Add display names for accounts.
*** TODO Use (strcat "account/" email "/" display-name) as the _id for accounts.
    CouchDB doesn't have unique constraints for general document fields. Gotta encode this stuff in
    the _id.
*** TODO Write a function that will return all currently-chatting accounts.
** Storybuilding
   In general, players can hang around and play casually however they want. If/when they have an
   idea or want to play out something more seriously, they can choose to start a 'scene' to earn
   points.

   A scene will be recorded, and transcribed to look like a screenplay once it's done. It will then
   be posted in a community area, where others can rate the overall scene, as well as individual
   characters in it.

   Scene scores are divided amongst players, and individual achievement scores give individual
   players bonuses. Points are awarded based on score, and the points can be used towards something.
*** DONE Use display names instead of account names for the chat.
*** DONE Add basic character creation.
    Just a little box where users can enter a character name, which must be unique, and a brief
    description of the character.
*** DONE Use current character name instead of display name for chat.
*** DONE Require a character to exist before a user can chat.
    This should be done by placing a character selection screen between the chat and the login
    screen. The character selection screen should include a list of current characters. Clicking on
    a character will log you into that character.
*** DONE Allow players to play multiple characters in different tabs/windows on a single account.
*** TODO Persistent scenes
    NOTE: This'll need to be done *after* characters are implemented.
    Players should be able to 'record' scenes, which will be saved as they see them. These scenes
    should be viewable in a separate page (for phase 1). Would be nice to also have them formatted
    as screenplays.
    Not all user messages must (or should) be saved. Instead, create a 'recorded session' document,
    and then record each line of input that the character is witness to into 'entry' documents,
    which can then be collated with the recorded session as outlined in the CouchDB Joins article.
**** DONE Add 'record' and 'stop recording' buttons to chat page.
     Link them up with a javascript function that alerts when recording starts/stops.
**** DONE Recorded session
     'Record' button should create a 'recorded-session' document, associated with the user. This
     document can be pretty blank, but will eventually be used to store more metadata. For now, use
     some default auto-generated name. The session should also be associated with the recording
     account.
**** DONE Recorded entries
     Create new 'recorded-entry' documents associated with the recorded for each line of input since
     the button was pressed. Linking entries with the 'scene' is done through document collation.
**** DONE View scenes page
     Add a 'recorded scenes' page where viewer can read through all the scenes they've recorded. The
     scenes should be formatted just like they were in the chat.
**** DONE Scene linking
     Users should have the ability to link to their entire recorded-scenes page, and/or link to
     individual scenes that other users (no login required for now) can view.
**** DONE Scene ratings
    Allow others to view and rate existing recorded scenes.
**** TODO Scene naming
     Add ability to change the name of the recorded session.
     NOTE: Perhaps more important than this -- descriptions? I'll do this later.
**** TODO Automatically add slug lines.
     Even if the user starts recording a while after entering an area, the recorded scene should
     include the slug line for that area. Will probably have to wait until we have locations. :)
**** TODO Automatically add location description under slug line.
     May need to wait until locations are implemented (although no harm in having some default text
     for now). Under the slug line for persisted scenes, the description of the location, as seen by
     the character at that point in time, should be included at the top of the scene.
**** TODO Select area to record
     No idea how insane this is at this phase: If you've already started a scene, and you realize
     you forgot to start recording it, or a scene finished, or whatever. Can you select a section of
     the log and save -that-? (would be nice. Leave for later if too hard)
     I think this may end up being easier if I first implement that websocket JSON-based protocol,
     and stop rendering HTML server-side. Instead, I can have the websocket server send JSON-encoded
     messages to the client.
     Once that bit is working, a per-client log (that cycles after X number of entries) can be kept,
     with indexes to associate each server-side entry with what was sent to the client. The client
     can then request entries X, Y, and Z to be saved/'recorded' as a scene log.
**** TODO Scene collection
    Users should be able to 'collect' others' stories, much like in DA.
**** TODO Scene editing
     I like the idea of rendering each 'sentence'/unit as a targetable DOM element (such as SPANs
     for sentences in a paragraph), and using jQuery UI to make those units individually
     draggable. I don't think I want to allow full editing of scenes (might feel like it defeats the
     purpose of -playing- the scenes if you can just -write- them), but this might be a really neat
     feature that allows cleaning up garbage without giving too much freedom (or requiring too much
     effort to handle formatting, and the like).
**** TODO FUTURE "Canon" system.
    While people can tell any story they want, how about giving extra weight to stories that fit the
    game's canon, and/or are staff approved?
*** TODO Make sure a user is chatting as a character only once.
*** TODO OOC pane
    There should be an OOC pane on the side (or somewhere) where miscellaneous messages and player
    chatting can happen without interrupting the flow of the scene.

*** TODO OOC messaging
    Once we have locations, you won't be able to chat with everyone and anyone anymore -- including
    OOCly. Still, it would be nice to be able to send messages to other players. For that purpose,
    an OOC messaging system should be implemented.
*** TODO More better input
    The current input method is cute, but not the intended one. A better input mechanism should be
    developed. Most likely, it should at least partly use the old MUD-style sentence parser, and
    decompose it into the necessary components. It's not important to get very fancy with this yet,
    though.
    While developing this, the fact that there will also be an OOC pane should be taken into
    consideration. Should there be multiple inputs?
    A full implementation of this will probably have to wait until there's full support for game
    objects and similar.
** Game
*** DONE Spend some time splitting game-related stuff into baby steps
    There's a lot that needs to happen. A lot of it is interrelated. Pick a starting point and a
    minimal requirement, build up from there.
*** DONE Replace input boxes with a single input box.
    The box should broadcast whatever is typed into it as the 'dialogue' for the current character.
*** TODO Add basic dialogue parser
    Instead of just typing anything into the box, dialogue should be delimited by a '.
*** TODO Basic actions
    Add the ability to take actions by using 'verbs'. These verbs can be inserted before
    dialogue. They should be entered in their infinitive form. The application should then convert
    them to third-person singular present and use them for the action. i.e. 'cry' -> 'Kat cries.'
    The following verbs should be available:
**** smile
**** frown
**** laugh
**** cry
**** wave
*** TODO Add concept of a 'location'
    Once characters exist, we can start adding the concept of a 'location' to the game. Locations
    should have a description, and should be able to 'contain' other characters. Characters can only
    interact with other characters provided they are in the same location.
*** TODO Put characters in a location
    Add several locations. Allow characters to interact only with other characters present in the
    current location.
*** TODO Location transitions
    Changing locations should have a couple of effects:
**** TODO Scene transition.
     The actor who is moving from point A to point B should receive a short scene-transition
     message, which should be properly formatted as a transition.
**** TODO Slug lines and descriptions
     Upon entering the new area, the actor who moved should receive both a new slug line (displayed
     after the transition message), followed by the new location's description.
**** TODO Hi, I'm here!
     Once the actor has transitioned into the new location, everyone, including the actor, should
     receive a "X arrives." message. This'll eventually be extended to provide fancier, nicer
     transitions, but an arrival message is good enough for now.
*** TODO Game objects - basic entities
    Time to start coding up some game objects!
    http://t-machine.org/index.php/2010/05/09/entity-system-1-javaandroid/ might be good to read.
**** TODO Convert characters to use entity system (start with Describable?)
**** TODO Convert locations to use entity system.
**** TODO Hook up the parser to the entity system.
***** TODO Allow parser to target characters by name.
***** TODO Allow parser to target locations by name.
*** TODO Event system
**** TODO Plan out some ideas for a fully-persistent event system.
**** TODO Implement a simple, non-persistent, asynchronous event system.
**** TODO Persist an event.
     Make an event that will output a message in 10 minutes, then shut down the server and bring it
     back up -- the event should still fire.

** Game client
*** DONE Refactor code to use a simple CouchDB-view-server-like protocol.
    Just so we have a nice open window for expansion. Something like
    ["message_type","contents"]. It'll allow things like ["ping",1], as well as any future
    non-chat-related commands we may want to send down the pipe. It might also be useful for doing
    any HTML rendering client-side, instead of having the webserver generate the markup.
*** DONE Popup character description when you click on character's name.
*** DONE Render chat html client-side
    Lisp shouldn't be pre-rendering HTML. Just send out a JSON response and let the client take care
    of it. The purpose of this is to be more flexible about presentation -- it'll make it easier to
    group chat messages together, as well as to add/remove bits and pieces.
*** DONE Possibly-optional websocket ping to keep the socket alive even when idle.
    Can't turn it off atm. Add new task if it becomes necessary to.
*** TODO Put descriptions somewhere more sane than an alert()
*** TODO Make description popups more generic: should be able to fetch any game object's description
*** TODO Location/visibility-restricted description getting
    Should validate what comes down the pipe: when a description request is received, there should
    be validation that the character can, in fact, see the object.
*** TODO Back-button-friendliness.
    When you leave the chat page, the websocket is disconnected. If you press 'back', though, the
    input fields are enabled, as if the websocket connection were still up. Perhaps there's a
    javascripty way to reconnect the websocket on back-button?
**** TODO disabled=true by default for chat input fields
*** TODO Better disconnect-client
    It shouldn't be using ws::client-disconnect. Until a better force-boot alternative pops up,
    though, _3b recommends that I just send a custom CLOSE message to the client, and close up the
    socket client-side.
*** TODO Move websocket stuff into its own file. (?)
*** TODO Fix clws to work on CCL.
*** TODO Optional Flash loading
    Things got messed up when I tried to have optional loading of Flash. Give it another shot.
*** TODO FUTURE make clws support socket.io protocol.
    socket.io has a client that automagically detects the right tools to use for different
    browsers. If clws supports socket.io's protocol, then rainbows will be shat, and even IE 5.5 and
    all the mobile browsers will be supported! This would probably take a bit of effort, and so is
    probably better left to near-launch. Websockets + Flash sockets is good enough for now.
*** TODO FUTURE separate websockets client from hunchentoot.
    This'll make it possible to switch the frontend.
** Webapp
*** DONE Split up handlers between POST and GET
*** DONE Move handlers to a separate file.
*** DONE Make / an actual homepage, /play the playing page.
*** TODO Improve form error reporting.
    The GET version should accept an optional 'errors' argument that it can be called with to handle
    error messages. This may involve not using define-easy-handler anymore.
*** TODO Loading screen
    Instead of alerts, replace the chat box with 'loading...' until the websocket is connected, then
    show the whole chat box.
*** TODO Templatify code
    belletrist.lisp is starting to look like a big ball of pseudo-HTML in some places. It might be
    worthwhile to start looking into moving that HTML out into template, or pseudo-template files.
*** TODO New template system
    All templating systems suck. This one won't. No logic goes into a template, and templates should
    be kept small (like functions). Additionally, multiple templates will be kept in a single file,
    which will generate either lisp functions or CLOS objects to correspond to each individual
    template, which the programmer can compose with the logic (much like pages are strung together
    with logic). The template files will basically look like lisp files, and require parameter
    declaration for clarity, as well as accept an optional docstring.
   
    Example:
    (deftempl standard-page (title head-contents body-contents)
      "This template renders the standard page thingy."
      <html>
        <head>
          <title>{title}</title>
          {head}
        </head>
        <body>
        {body-contents}
        </body>
      </html>)
   
    The above can be loaded (probably with a special reader macro), and could then create a function
    to be called on a stream, with the required parameters:
    (load "page.templ")
    (render-template 'standard-page *standard-output* :title "My special page" :body-contents "<p>Hello, World!</p>")
   
    Question: Do even minor instances of HTML need to be templated out?
*** TODO Smaller timeout for ajax ping.
    Those AJAX pings will stay alive for freakin' ever. Make them time out quicker.
*** TODO Styling
    Seriously. Make things -not- look like utter shit.
** Chillax
*** DONE Fix the goddamn view server.
    It's switching the order of map functions in a view. :(
*** DONE Figure out why the hell the view server is freezing up
*** TODO Build a view server that uses jsown.
    JSOWN ftw. For bonus points, make the view server *not* decode JSON by default, for top speed.
*** TODO Convert view code to use jsown, too.
    Because using mkhash in one place and mkdoc in another sucks.
